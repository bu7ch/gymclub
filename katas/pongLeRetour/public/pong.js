// Generated by CoffeeScript 1.4.0
var ApplicationFacade, ApplicationMediator, Ball, BallMediator, Mediator, Notification, Notifier, ScoreMediator, SoundManager, app, canvas, clear,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Notification = (function() {

  function Notification(name, body, type) {
    this.name = name;
    this.body = body;
    this.type = type;
  }

  Notification.prototype.getName = function() {
    return this.name;
  };

  Notification.prototype.getBody = function() {
    return this.body;
  };

  Notification.prototype.getType = function() {
    return this.type;
  };

  Notification.prototype.toString = function() {
    return "Notification Name: " + this.name + "    \nBody: " + (this.body || null) + "    \nType: " + (this.type || null) + "    ";
  };

  return Notification;

})();

Notifier = (function() {

  Notifier.prototype.facade = null;

  function Notifier() {
    this.facade = ApplicationFacade.getInstance();
  }

  Notifier.prototype.sendNotification = function(name, body, type) {
    return this.facade.sendNotification(name, body, type);
  };

  return Notifier;

})();

Mediator = (function(_super) {

  __extends(Mediator, _super);

  function Mediator() {
    Mediator.__super__.constructor.call(this);
  }

  Mediator.prototype.notify = function(note) {};

  return Mediator;

})(Notifier);

Ball = (function(_super) {

  __extends(Ball, _super);

  function Ball(limits) {
    this.limits = limits;
    Ball.__super__.constructor.call(this);
    this.position = {
      x: this.limits.x / 2,
      y: this.limits.y / 2
    };
    this.velocity = {
      x: 1,
      y: 1
    };
    this.size = Math.ceil(Math.random() * 100);
  }

  Ball.prototype.move = function() {
    if (this.position.y + this.size >= this.limits.y || this.position.y <= 0) {
      this.velocity.y *= -1;
      this.sendNotification('REVERSE', self);
    }
    if (this.position.x + this.size >= this.limits.x || this.position.x <= 0) {
      this.velocity.x *= -1;
    }
    this.position.x += this.velocity.x;
    return this.position.y += this.velocity.y;
  };

  Ball.prototype.collides = function(b) {
    if (b === this) {
      return false;
    }
    return Math.abs(this.position.x + this.velocity.x - b.position.x - b.velocity.x) < this.size && Math.abs(this.position.y + this.velocity.y - b.position.y - b.velocity.y) < this.size;
  };

  Ball.prototype.bounceOn = function(b) {
    if (this.velocity.x / b.velocity.x < 0) {
      this.velocity.x *= -1;
    }
    if (this.velocity.y / b.velocity.y < 0) {
      return this.velocity.y *= -1;
    }
  };

  return Ball;

})(Notifier);

BallMediator = (function(_super) {

  __extends(BallMediator, _super);

  function BallMediator(ball, canvas) {
    this.ball = ball;
    BallMediator.__super__.constructor.call(this);
    this.context = canvas.getContext('2d');
  }

  BallMediator.prototype.draw = function() {
    this.context.fillStyle = "#00A308";
    return this.context.fillRect(this.ball.position.x, this.ball.position.y, this.ball.size, this.ball.size);
  };

  BallMediator.prototype.notify = function(note) {
    var ball;
    switch (note.name) {
      case 'REVERSE':
        ball = note.body;
        return SoundManager.play('fail');
    }
  };

  return BallMediator;

})(Mediator);

SoundManager = (function() {
  var instance;

  instance = null;

  SoundManager.sounds = [];

  function SoundManager() {
    this.sounds = {};
  }

  SoundManager.register = function(name, path) {
    return this.sounds[name] = new Audio(path);
  };

  SoundManager.play = function(name) {
    return this.sounds[name].play();
  };

  SoundManager.getInstance = function() {
    return instance != null ? instance : instance = new SoundManager();
  };

  return SoundManager;

})();

ScoreMediator = (function(_super) {

  __extends(ScoreMediator, _super);

  function ScoreMediator(canvas) {
    this.canvas = canvas;
    ScoreMediator.__super__.constructor.call(this);
    this.context = canvas.getContext('2d');
  }

  ScoreMediator.prototype.draw = function(p1, p2) {
    this.context.font = "italic 20pt Calibri";
    return this.context.fillText("Score : " + p1 + "/" + p2, 0, 20);
  };

  return ScoreMediator;

})(Notifier);

ApplicationMediator = (function(_super) {

  __extends(ApplicationMediator, _super);

  function ApplicationMediator(canvas) {
    ApplicationMediator.__super__.constructor.call(this);
    this.context = canvas.getContext('2d');
  }

  ApplicationMediator.prototype.clear = function() {
    return canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
  };

  return ApplicationMediator;

})(Notifier);

ApplicationFacade = (function() {
  var instance;

  instance = null;

  ApplicationFacade.prototype.views = null;

  ApplicationFacade.prototype.score = null;

  function ApplicationFacade() {
    this.views = [];
    this.score = {
      p1: 0,
      p2: 0
    };
  }

  ApplicationFacade.prototype.main = function() {
    var ball, balls, i, scoreView, v, _i, _j, _len, _ref;
    for (i = _i = 1; _i <= 4; i = ++_i) {
      ball = new Ball({
        x: canvas.width,
        y: canvas.height
      });
      ball.position.x = i * 10;
      ball.position.y = i * 10;
      ball.velocity.x = (i % 2) * -1 || Â 1;
      if (i === 2) {
        ball.velocity.y = (i % 2) * -1 || 1;
      }
      this.registerObservers(new BallMediator(ball, canvas));
    }
    console.log(this.views);
    _ref = this.views;
    for (_j = 0, _len = _ref.length; _j < _len; _j++) {
      v = _ref[_j];
      balls = v.ball;
    }
    scoreView = new ScoreMediator(canvas);
    return setInterval(function() {
      var app, b1, b2, _k, _l, _len1, _len2, _len3, _len4, _m, _n, _ref1, _ref2;
      app = ApplicationFacade.getInstance();
      _ref1 = app.views;
      for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
        v = _ref1[_k];
        for (_l = 0, _len2 = balls.length; _l < _len2; _l++) {
          b1 = balls[_l];
          for (_m = 0, _len3 = balls.length; _m < _len3; _m++) {
            b2 = balls[_m];
            if (b1.collides(b2)) {
              b1.bounceOn(b2);
            }
          }
        }
        v.ball.move();
      }
      clear();
      _ref2 = app.views;
      for (_n = 0, _len4 = _ref2.length; _n < _len4; _n++) {
        v = _ref2[_n];
        v.draw();
      }
      return scoreView.draw(app.score.p1, app.score.p2);
    }, 5);
  };

  ApplicationFacade.prototype.sendNotification = function(name, body, type) {
    return this.notifyObservers(new Notification(name, body, type));
  };

  ApplicationFacade.prototype.notifyObservers = function(note) {
    var v, _i, _len, _ref, _results;
    _ref = this.views;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push(v.notify(note));
    }
    return _results;
  };

  ApplicationFacade.prototype.registerObservers = function(observer) {
    this.views.push(observer);
    return observer;
  };

  ApplicationFacade.getInstance = function() {
    return instance != null ? instance : instance = new ApplicationFacade();
  };

  return ApplicationFacade;

})();

canvas = document.getElementsByTagName('canvas')[0];

clear = function() {
  return canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
};

SoundManager.register('fail', 'sounds/fail.wav');

app = ApplicationFacade.getInstance();

app.main();
